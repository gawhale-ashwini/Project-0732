pipeline {
    agent any
    tools {
        maven 'sonar-maven' 
    }
    stages {
        stage ('Build') {
            steps {
                sh 'pwd' // Print current directory
                sh 'ls -la' // List files in the current directory

                sh 'cd Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage ('Static Code Analysis') {
            environment {
                SONAR_URL = "http://100.25.151.128:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage ('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "ashwinigawhale/ultimate-cicd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage ('Update Deployment File') {
    environment {
        GIT_REPO_NAME = "Project-0732"
        GIT_USER_NAME = "gawhale-ashwini"
    }
    steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "ashwinigawhale1001@gmail.com"
                git config user.name "gawhale-ashwini"
                BUILD_NUMBER=${BUILD_NUMBER}
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                su jenkins
                read -s -p a
                //cd /var/lib/jenkins/workspace/Project/Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests
                cd
                cd /workspace/Project/Jenkins-Zero-To-Hero-main/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests
                git init 
                git add .
                
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
            '''
        }
    }
}

    }

    post {
        always {
            script {
                sendSlackNotification()
            }
        }
    }
}

def sendSlackNotification() {
    if (currentBuild.currentResult == "SUCCESS") {
        def buildSummary = "Job_name: ${env.JOB_NAME}\n Build_id: ${env.BUILD_ID} \n Status: *SUCCESS*\n Build_url: ${BUILD_URL}\n Job_url: ${JOB_URL}\n"
        slackSend(channel: "#devops-project", token: 'slack', color: 'good', message: "${buildSummary}")
    } else {
        def buildSummary = "Job_name: ${env.JOB_NAME}\n Build_id: ${env.BUILD_ID} \n Status: *FAILURE*\n Build_url: ${BUILD_URL}\n Job_url: ${JOB_URL}\n  \n "
        slackSend(channel: "#devops-project", token: 'slack', color: 'danger', message: "${buildSummary}")
    }
}
